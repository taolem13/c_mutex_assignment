#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

//Q1: Operating systems like Windows, Linux, and Solaris implement multiple locking mechanisms to efficiently handle different synchronization scenarios. These mechanisms balance performance and resource management based on factors like contention levels, execution time, and kernel/user mode execution. Spinlocks are used in short critical sections and in kernel mode, to avoid context switching overhead when the contention is low. Mutex locks are used in longer critical sections, in both user-mode and kernel-mode, and are used to allow the unused thread to sleep in the meantime, saving CPU usage. Semaphores are used in resource counting applications, and when multiple processes need to be synchronized. They are used to allow more than one thread in the critical section and are useful for managing a shared resource pool. Adaptive mutex locks are used in high-contention scenarios, and are used as a way to optimize CPU time by having a waiting thread spin for a bit and then sleep. If the lock holder is not running, the thread blocks immediately. Condition variables are used when threads need to wait for a certain condition to become true before proceeding, mostly in producer-consumer scenarios. This allows efficient waiting and signaling.
//Q2: On a single-processor system, spinlocks are inefficient because a waiting thread cannot make progress while spinning, as while the lock owner is not running the waiting thread wastes CPU cycles instead of progressing. Mutex is more efficient in this single-core environment. Spinlocks are used in multi-processor systems when critical sections are short, as context-switching overhead would be higher than spinning. The lock holder is able to run on another CPU.
//Q3: The system clock relies on hardware timer interrupts to keep track of time. When interrupts are disabled too frequently or for too long, it can lead to missed timer interrupts, clock drift, and reduced system responsiveness. The system clock updates a regular intervals based on timer interrupts, and if these interrupts are disabled during a timer tick, the interrupt will be delayed or missed, causing the system time to fall behind. This impact can be minimized through keeping critical sections as short as possible to limit the time interrupts are disabled, and using spinlocks only for very short locks and using other mechanisms like mutex for longer operations.


pthread_mutex_t lock;
int shared_data = 0;

void* writer_thread(void* arg) {
    for (int i = 1; i <= 5; i++) {
        pthread_mutex_lock(&lock);
        shared_data = i * 10;  
        printf("Writer: Updated shared_data to %d\n", shared_data);
        pthread_mutex_unlock(&lock);
        sleep(1); 
    }
    return NULL;
}

void* reader_thread(void* arg) {
    for (int i = 1; i <= 5; i++) {
        pthread_mutex_lock(&lock);
        printf("Reader: Read shared_data as %d\n", shared_data);
        pthread_mutex_unlock(&lock);
        sleep(1); 
    }
    return NULL;
}

int main() {
    pthread_t thread_1, thread_2;
    pthread_mutex_init(&lock, NULL);

    pthread_create(&thread_1, NULL, writer_thread, NULL);
    pthread_create(&thread_2, NULL, reader_thread, NULL);

    pthread_join(thread_1, NULL);
    pthread_join(thread_2, NULL);

    pthread_mutex_destroy(&lock);
    return 0;
}
